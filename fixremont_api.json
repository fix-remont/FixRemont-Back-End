{
  "openapi": "3.1.0",
  "info": {
    "title": "FastAPI",
    "version": "0.1.0"
  },
  "paths": {
    "/auth/jwt/login": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Auth:Jwt.Login",
        "operationId": "auth_jwt_login_auth_jwt_login_post",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Body_auth_jwt_login_auth_jwt_login_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BearerResponse"
                },
                "example": {
                  "access_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiOTIyMWZmYzktNjQwZi00MzcyLTg2ZDMtY2U2NDJjYmE1NjAzIiwiYXVkIjoiZmFzdGFwaS11c2VyczphdXRoIiwiZXhwIjoxNTcxNTA0MTkzfQ.M10bjOe45I5Ncu_uXvOmVV8QxnL-nZfcH96U90JaocI",
                  "token_type": "bearer"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                },
                "examples": {
                  "LOGIN_BAD_CREDENTIALS": {
                    "summary": "Bad credentials or the user is inactive.",
                    "value": {
                      "detail": "LOGIN_BAD_CREDENTIALS"
                    }
                  },
                  "LOGIN_USER_NOT_VERIFIED": {
                    "summary": "The user is not verified.",
                    "value": {
                      "detail": "LOGIN_USER_NOT_VERIFIED"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/jwt/logout": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Auth:Jwt.Logout",
        "operationId": "auth_jwt_logout_auth_jwt_logout_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          },
          "401": {
            "description": "Missing token or inactive user."
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": [ ]
          }
        ]
      }
    },
    "/auth/register": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Register:Register",
        "operationId": "register_register_auth_register_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRead"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                },
                "examples": {
                  "REGISTER_USER_ALREADY_EXISTS": {
                    "summary": "A user with this email already exists.",
                    "value": {
                      "detail": "REGISTER_USER_ALREADY_EXISTS"
                    }
                  },
                  "REGISTER_INVALID_PASSWORD": {
                    "summary": "Password validation failed.",
                    "value": {
                      "detail": {
                        "code": "REGISTER_INVALID_PASSWORD",
                        "reason": "Password should beat least 3 characters"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/forgot-password": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Reset:Forgot Password",
        "operationId": "reset_forgot_password_auth_forgot_password_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_reset_forgot_password_auth_forgot_password_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/reset-password": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Reset:Reset Password",
        "operationId": "reset_reset_password_auth_reset_password_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_reset_reset_password_auth_reset_password_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                },
                "examples": {
                  "RESET_PASSWORD_BAD_TOKEN": {
                    "summary": "Bad or expired token.",
                    "value": {
                      "detail": "RESET_PASSWORD_BAD_TOKEN"
                    }
                  },
                  "RESET_PASSWORD_INVALID_PASSWORD": {
                    "summary": "Password validation failed.",
                    "value": {
                      "detail": {
                        "code": "RESET_PASSWORD_INVALID_PASSWORD",
                        "reason": "Password should be at least 3 characters"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/request-verify-token": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Verify:Request-Token",
        "operationId": "verify_request_token_auth_request_verify_token_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_verify_request_token_auth_request_verify_token_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/verify": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Verify:Verify",
        "operationId": "verify_verify_auth_verify_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_verify_verify_auth_verify_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRead"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                },
                "examples": {
                  "VERIFY_USER_BAD_TOKEN": {
                    "summary": "Bad token, not existing user ornot the e-mail currently set for the user.",
                    "value": {
                      "detail": "VERIFY_USER_BAD_TOKEN"
                    }
                  },
                  "VERIFY_USER_ALREADY_VERIFIED": {
                    "summary": "The user is already verified.",
                    "value": {
                      "detail": "VERIFY_USER_ALREADY_VERIFIED"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Users:Current User",
        "operationId": "users_current_user_users_me_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRead"
                }
              }
            }
          },
          "401": {
            "description": "Missing token or inactive user."
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": [ ]
          }
        ]
      },
      "patch": {
        "tags": [
          "users"
        ],
        "summary": "Users:Patch Current User",
        "operationId": "users_patch_current_user_users_me_patch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRead"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                },
                "examples": {
                  "UPDATE_USER_EMAIL_ALREADY_EXISTS": {
                    "summary": "A user with this email already exists.",
                    "value": {
                      "detail": "UPDATE_USER_EMAIL_ALREADY_EXISTS"
                    }
                  },
                  "UPDATE_USER_INVALID_PASSWORD": {
                    "summary": "Password validation failed.",
                    "value": {
                      "detail": {
                        "code": "UPDATE_USER_INVALID_PASSWORD",
                        "reason": "Password should beat least 3 characters"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Missing token or inactive user."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": [ ]
          }
        ]
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Users:User",
        "operationId": "users_user_users__id__get",
        "security": [
          {
            "OAuth2PasswordBearer": [ ]
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRead"
                }
              }
            }
          },
          "401": {
            "description": "Missing token or inactive user."
          },
          "403": {
            "description": "Not a superuser."
          },
          "404": {
            "description": "The user does not exist."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "users"
        ],
        "summary": "Users:Patch User",
        "operationId": "users_patch_user_users__id__patch",
        "security": [
          {
            "OAuth2PasswordBearer": [ ]
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRead"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "UPDATE_USER_EMAIL_ALREADY_EXISTS": {
                    "summary": "A user with this email already exists.",
                    "value": {
                      "detail": "UPDATE_USER_EMAIL_ALREADY_EXISTS"
                    }
                  },
                  "UPDATE_USER_INVALID_PASSWORD": {
                    "summary": "Password validation failed.",
                    "value": {
                      "detail": {
                        "code": "UPDATE_USER_INVALID_PASSWORD",
                        "reason": "Password should beat least 3 characters"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "Missing token or inactive user."
          },
          "403": {
            "description": "Not a superuser."
          },
          "404": {
            "description": "The user does not exist."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Users:Delete User",
        "operationId": "users_delete_user_users__id__delete",
        "security": [
          {
            "OAuth2PasswordBearer": [ ]
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "401": {
            "description": "Missing token or inactive user."
          },
          "403": {
            "description": "Not a superuser."
          },
          "404": {
            "description": "The user does not exist."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/": {
      "get": {
        "summary": "Home",
        "operationId": "home__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      }
    },
    "/contacts": {
      "get": {
        "summary": "Contacts",
        "operationId": "contacts_contacts_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      }
    },
    "/feedbacks": {
      "get": {
        "summary": "Feedbacks",
        "operationId": "feedbacks_feedbacks_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      }
    },
    "/about": {
      "get": {
        "summary": "About",
        "operationId": "about_about_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      }
    },
    "/gratitude": {
      "get": {
        "summary": "Gratitude",
        "operationId": "gratitude_gratitude_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      }
    },
    "/test-authenticated-route": {
      "get": {
        "summary": "Authenticated Route",
        "operationId": "authenticated_route_test_authenticated_route_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": [ ]
          }
        ]
      }
    },
    "/services": {
      "get": {
        "summary": "Services",
        "operationId": "services_services_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      }
    },
    "/services/renovation": {
      "get": {
        "summary": "Renovation Service",
        "operationId": "renovation_service_services_renovation_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      }
    },
    "/services/building": {
      "get": {
        "summary": "Building Service",
        "operationId": "building_service_services_building_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      }
    },
    "/partnership": {
      "get": {
        "summary": "Partnership",
        "operationId": "partnership_partnership_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      }
    },
    "/partnership/realtors": {
      "get": {
        "summary": "Realtors",
        "operationId": "realtors_partnership_realtors_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      }
    },
    "/partnership/builders": {
      "get": {
        "summary": "Builders",
        "operationId": "builders_partnership_builders_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      }
    },
    "/partnership/persons": {
      "get": {
        "summary": "Persons",
        "operationId": "persons_partnership_persons_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      }
    },
    "/create-work/": {
      "post": {
        "summary": "Create Work Endpoint",
        "operationId": "create_work_endpoint_create_work__post",
        "parameters": [
          {
            "name": "title",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Title"
            }
          },
          {
            "name": "project_type",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProjectType"
            }
          },
          {
            "name": "deadline",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "title": "Deadline"
            }
          },
          {
            "name": "cost",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "title": "Cost"
            }
          },
          {
            "name": "square",
            "in": "query",
            "required": true,
            "schema": {
              "type": "number",
              "minimum": 0,
              "title": "Square"
            }
          },
          {
            "name": "task",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Task"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_create_work_endpoint_create_work__post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Work"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/portfolio": {
      "get": {
        "summary": "Get All Works Endpoint",
        "operationId": "get_all_works_endpoint_portfolio_get",
        "parameters": [
          {
            "name": "project_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": "",
              "title": "Project Type"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/work/{work_id}": {
      "get": {
        "summary": "Get Work Endpoint",
        "operationId": "get_work_endpoint_work__work_id__get",
        "parameters": [
          {
            "name": "work_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Work Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/create-blog/": {
      "post": {
        "summary": "Create Post Endpoint",
        "operationId": "create_post_endpoint_create_blog__post",
        "parameters": [
          {
            "name": "title",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Title"
            }
          },
          {
            "name": "post_type",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PostType"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_create_post_endpoint_create_blog__post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/blog": {
      "get": {
        "summary": "Get All Posts Endpoint",
        "operationId": "get_all_posts_endpoint_blog_get",
        "parameters": [
          {
            "name": "post_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": "",
              "title": "Post Type"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/blog/{post_id}": {
      "get": {
        "summary": "Get Post Endpoint",
        "operationId": "get_post_endpoint_blog__post_id__get",
        "parameters": [
          {
            "name": "post_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Post Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/user/clients": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get Clients",
        "operationId": "get_clients_user_clients_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create Client",
        "operationId": "create_client_user_clients_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": [ ]
          }
        ]
      }
    },
    "/user/clients/{client_id}": {
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Update Client",
        "operationId": "update_client_user_clients__client_id__put",
        "security": [
          {
            "OAuth2PasswordBearer": [ ]
          }
        ],
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Client Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/user/contracts": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get Contracts",
        "operationId": "get_contracts_user_contracts_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create Contract",
        "operationId": "create_contract_user_contracts_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContractCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": [ ]
          }
        ]
      }
    },
    "/user/contracts/{contract_id}": {
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Update Contract",
        "operationId": "update_contract_user_contracts__contract_id__put",
        "security": [
          {
            "OAuth2PasswordBearer": [ ]
          }
        ],
        "parameters": [
          {
            "name": "contract_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Contract Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContractUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/user/main": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Main Page",
        "operationId": "main_page_user_main_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": [ ]
          }
        ]
      }
    },
    "/user/wallet": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Wallet Page",
        "operationId": "wallet_page_user_wallet_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": [ ]
          }
        ]
      }
    },
    "/user/profile": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Profile Page",
        "operationId": "profile_page_user_profile_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": [ ]
          }
        ]
      }
    },
    "/user/news": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "News Page",
        "operationId": "news_page_user_news_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": [ ]
          }
        ]
      }
    },
    "/user/support": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Support Page",
        "operationId": "support_page_user_support_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": [ ]
          }
        ]
      }
    },
    "/user/partnership": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Partnership Page",
        "operationId": "partnership_page_user_partnership_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": [ ]
          }
        ]
      }
    },
    "/user/referral_code": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get Referral Code",
        "operationId": "get_referral_code_user_referral_code_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": [ ]
          }
        ]
      }
    },
    "/user/insert_referral_code": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Insert Referral Code",
        "operationId": "insert_referral_code_user_insert_referral_code_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReferralCodeInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": [ ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "BearerResponse": {
        "properties": {
          "access_token": {
            "type": "string",
            "title": "Access Token"
          },
          "token_type": {
            "type": "string",
            "title": "Token Type"
          }
        },
        "type": "object",
        "required": [
          "access_token",
          "token_type"
        ],
        "title": "BearerResponse"
      },
      "Body_auth_jwt_login_auth_jwt_login_post": {
        "properties": {
          "grant_type": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "password"
              },
              {
                "type": "null"
              }
            ],
            "title": "Grant Type"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "password": {
            "type": "string",
            "title": "Password"
          },
          "scope": {
            "type": "string",
            "title": "Scope",
            "default": ""
          },
          "client_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Id"
          },
          "client_secret": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Secret"
          }
        },
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "title": "Body_auth_jwt_login_auth_jwt_login_post"
      },
      "Body_create_post_endpoint_create_blog__post": {
        "properties": {
          "files": {
            "items": {
              "type": "string",
              "format": "binary"
            },
            "type": "array",
            "title": "Files"
          },
          "content": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Content"
          }
        },
        "type": "object",
        "required": [
          "files",
          "content"
        ],
        "title": "Body_create_post_endpoint_create_blog__post"
      },
      "Body_create_work_endpoint_create_work__post": {
        "properties": {
          "files": {
            "items": {
              "type": "string",
              "format": "binary"
            },
            "type": "array",
            "title": "Files"
          },
          "description": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Description"
          }
        },
        "type": "object",
        "required": [
          "files",
          "description"
        ],
        "title": "Body_create_work_endpoint_create_work__post"
      },
      "Body_reset_forgot_password_auth_forgot_password_post": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          }
        },
        "type": "object",
        "required": [
          "email"
        ],
        "title": "Body_reset_forgot_password_auth_forgot_password_post"
      },
      "Body_reset_reset_password_auth_reset_password_post": {
        "properties": {
          "token": {
            "type": "string",
            "title": "Token"
          },
          "password": {
            "type": "string",
            "title": "Password"
          }
        },
        "type": "object",
        "required": [
          "token",
          "password"
        ],
        "title": "Body_reset_reset_password_auth_reset_password_post"
      },
      "Body_verify_request_token_auth_request_verify_token_post": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          }
        },
        "type": "object",
        "required": [
          "email"
        ],
        "title": "Body_verify_request_token_auth_request_verify_token_post"
      },
      "Body_verify_verify_auth_verify_post": {
        "properties": {
          "token": {
            "type": "string",
            "title": "Token"
          }
        },
        "type": "object",
        "required": [
          "token"
        ],
        "title": "Body_verify_verify_auth_verify_post"
      },
      "ClientCreate": {
        "properties": {
          "object": {
            "type": "string",
            "title": "Object"
          },
          "tariff": {
            "type": "string",
            "title": "Tariff"
          },
          "location": {
            "type": "string",
            "title": "Location"
          },
          "rate": {
            "type": "integer",
            "title": "Rate"
          },
          "current_stage": {
            "type": "string",
            "title": "Current Stage"
          }
        },
        "type": "object",
        "required": [
          "object",
          "tariff",
          "location",
          "rate",
          "current_stage"
        ],
        "title": "ClientCreate"
      },
      "ClientUpdate": {
        "properties": {
          "object": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Object"
          },
          "tariff": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tariff"
          },
          "location": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Location"
          },
          "rate": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Rate"
          },
          "current_stage": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Current Stage"
          }
        },
        "type": "object",
        "title": "ClientUpdate"
      },
      "ContractCreate": {
        "properties": {
          "object": {
            "type": "string",
            "title": "Object"
          },
          "tariff": {
            "type": "string",
            "title": "Tariff"
          },
          "location": {
            "type": "string",
            "title": "Location"
          },
          "total_cost": {
            "type": "integer",
            "title": "Total Cost"
          },
          "current_stage": {
            "type": "string",
            "title": "Current Stage"
          }
        },
        "type": "object",
        "required": [
          "object",
          "tariff",
          "location",
          "total_cost",
          "current_stage"
        ],
        "title": "ContractCreate"
      },
      "ContractUpdate": {
        "properties": {
          "object": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Object"
          },
          "tariff": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tariff"
          },
          "location": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Location"
          },
          "total_cost": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Cost"
          },
          "current_stage": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Current Stage"
          }
        },
        "type": "object",
        "title": "ContractUpdate"
      },
      "ErrorModel": {
        "properties": {
          "detail": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              }
            ],
            "title": "Detail"
          }
        },
        "type": "object",
        "required": [
          "detail"
        ],
        "title": "ErrorModel"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "Post": {
        "properties": {
          "title": {
            "type": "string",
            "title": "Title"
          },
          "post_type": {
            "$ref": "#/components/schemas/PostType"
          },
          "content": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Content"
          }
        },
        "type": "object",
        "required": [
          "title",
          "post_type",
          "content"
        ],
        "title": "Post"
      },
      "PostType": {
        "type": "string",
        "enum": [
          "flat_renovation",
          "house_building",
          "news"
        ],
        "title": "PostType"
      },
      "ProjectType": {
        "type": "string",
        "enum": [
          "flat",
          "house"
        ],
        "title": "ProjectType"
      },
      "ReferralCodeInput": {
        "properties": {
          "user_referral_code": {
            "type": "string",
            "title": "User Referral Code"
          }
        },
        "type": "object",
        "required": [
          "user_referral_code"
        ],
        "title": "ReferralCodeInput"
      },
      "UserCreate": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "password": {
            "type": "string",
            "title": "Password"
          },
          "is_active": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Active",
            "default": true
          },
          "is_superuser": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Superuser",
            "default": false
          },
          "is_verified": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Verified",
            "default": false
          },
          "user_type": {
            "$ref": "#/components/schemas/UserType"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "surname": {
            "type": "string",
            "title": "Surname"
          },
          "phone": {
            "type": "string",
            "title": "Phone"
          }
        },
        "type": "object",
        "required": [
          "email",
          "password",
          "user_type",
          "name",
          "surname",
          "phone"
        ],
        "title": "UserCreate"
      },
      "UserRead": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          },
          "is_superuser": {
            "type": "boolean",
            "title": "Is Superuser",
            "default": false
          },
          "is_verified": {
            "type": "boolean",
            "title": "Is Verified",
            "default": false
          },
          "user_type": {
            "$ref": "#/components/schemas/UserType"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "surname": {
            "type": "string",
            "title": "Surname"
          },
          "phone": {
            "type": "string",
            "title": "Phone"
          }
        },
        "type": "object",
        "required": [
          "id",
          "email",
          "user_type",
          "name",
          "surname",
          "phone"
        ],
        "title": "UserRead"
      },
      "UserType": {
        "type": "string",
        "enum": [
          "realtor",
          "developer",
          "individual"
        ],
        "title": "UserType"
      },
      "UserUpdate": {
        "properties": {
          "password": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Password"
          },
          "email": {
            "anyOf": [
              {
                "type": "string",
                "format": "email"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email"
          },
          "is_active": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Active"
          },
          "is_superuser": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Superuser"
          },
          "is_verified": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Verified"
          },
          "user_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/UserType"
              },
              {
                "type": "null"
              }
            ]
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "surname": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Surname"
          },
          "phone": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Phone"
          }
        },
        "type": "object",
        "title": "UserUpdate"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "Work": {
        "properties": {
          "title": {
            "type": "string",
            "title": "Title"
          },
          "project_type": {
            "$ref": "#/components/schemas/ProjectType"
          },
          "deadline": {
            "type": "integer",
            "exclusiveMinimum": 0,
            "title": "Deadline"
          },
          "cost": {
            "type": "integer",
            "exclusiveMinimum": 0,
            "title": "Cost"
          },
          "square": {
            "type": "number",
            "minimum": 0,
            "title": "Square"
          },
          "task": {
            "type": "string",
            "title": "Task"
          },
          "description": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Description"
          }
        },
        "type": "object",
        "required": [
          "title",
          "project_type",
          "deadline",
          "cost",
          "square",
          "task",
          "description"
        ],
        "title": "Work"
      }
    },
    "securitySchemes": {
      "OAuth2PasswordBearer": {
        "type": "oauth2",
        "flows": {
          "password": {
            "scopes": { },
            "tokenUrl": "auth/jwt/login"
          }
        }
      }
    }
  }
}